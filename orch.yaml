id: wine-data-processing
namespace: bottleneck

triggers:
  - id: monthly-trigger
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 9 15 * *"  # Exécution chaque 15 du mois à 9h

tasks:
  - id: download_file_erp
    type: io.kestra.plugin.aws.s3.Download
    bucket: "{{ secret('AWS_BUCKET') }}"
    region: "eu-west-3"
    accessKeyId: "{{ secret('AWS_ACCESS_KEY') }}"
    secretKeyId: "{{ secret('AWS_SECRET_KEY') }}"
    key: "{{ secret('AWS_KEY') }}"

  - id: download_file_liaison
    type: io.kestra.plugin.aws.s3.Download
    bucket: "{{ secret('AWS_BUCKET') }}"
    region: "eu-west-3"
    accessKeyId: "{{ secret('AWS_ACCESS_KEY') }}"
    secretKeyId: "{{ secret('AWS_SECRET_KEY') }}"
    key: "{{ secret('AWS_KEY') }}"

  - id: download_file_web
    type: io.kestra.plugin.aws.s3.Download
    bucket: "{{ secret('AWS_BUCKET') }}"
    region: "eu-west-3"
    accessKeyId: "{{ secret('AWS_ACCESS_KEY') }}"
    secretKeyId: "{{ secret('AWS_SECRET_KEY') }}"
    key: "{{ secret('AWS_KEY') }}"


  - id: clean_erp_to_db
    type: io.kestra.plugin.jdbc.duckdb.Query
    url: 'jdbc:duckdb:/tmp/my_database.duckdb'
    inputFiles:
      Fichier_erp.xlsx: "{{ outputs.download_file_erp.uri }}" 
    sql: |-
        INSTALL sheetreader FROM community;
        LOAD sheetreader;

        DROP TABLE IF EXISTS clean_erp;
        CREATE TABLE clean_erp AS 
        SELECT DISTINCT ON (product_id) * 
        FROM sheetreader('{{ workingDir }}/Fichier_erp.xlsx') 
        WHERE product_id IS NOT NULL 
        ORDER BY product_id;


  - id: clean_web_to_db
    type: io.kestra.plugin.jdbc.duckdb.Query
    url: 'jdbc:duckdb:/tmp/my_database.duckdb'
    inputFiles:
      Fichier_web.xlsx: "{{ outputs.download_file_web.uri }}" 
    sql: |-
        INSTALL sheetreader FROM community;
        LOAD sheetreader;

        DROP TABLE IF EXISTS clean_web;
        CREATE TABLE clean_web AS 
        SELECT DISTINCT ON (sku) *
        FROM sheetreader('{{ workingDir }}/Fichier_web.xlsx') 
        WHERE sku IS NOT NULL 
        ORDER BY sku;

        DROP TABLE IF EXISTS web;
        CREATE TABLE web AS 
        SELECT *
        FROM sheetreader('{{ workingDir }}/Fichier_web.xlsx')  
        ORDER BY sku;

  - id: clean_liaison_to_db
    type: io.kestra.plugin.jdbc.duckdb.Query
    url: 'jdbc:duckdb:/tmp/my_database.duckdb'
    inputFiles:
      Fichier_liaison.xlsx: "{{ outputs.download_file_liaison.uri }}" 
    sql: |-
        INSTALL sheetreader FROM community;
        LOAD sheetreader;

        DROP TABLE IF EXISTS clean_liaison;
        CREATE TABLE clean_liaison AS 
        SELECT DISTINCT product_id, id_web
        FROM sheetreader('{{ workingDir }}/Fichier_liaison.xlsx') 
        WHERE product_id IS NOT NULL 
        OR id_web IS NOT NULL;



  - id: calcul_ca
    type: io.kestra.plugin.jdbc.duckdb.Query
    url: 'jdbc:duckdb:/tmp/my_database.duckdb'
    sql: |-
        DROP TABLE IF EXISTS merged_data;
        CREATE TABLE merged_data AS (
          SELECT e.*, w.*
          FROM clean_erp e
          JOIN clean_liaison l ON e.product_id = l.product_id
          JOIN clean_web w ON l.id_web = w.sku
        );

        DROP TABLE IF EXISTS revenue;
        CREATE TABLE revenue AS
          SELECT e.product_id, SUM(e.price * e.stock_quantity) AS revenue
          FROM merged_data e
          GROUP BY e.product_id;

        DROP TABLE IF EXISTS total_revenue;
        CREATE TABLE total_revenue AS
          SELECT SUM(revenue) AS total FROM revenue;

