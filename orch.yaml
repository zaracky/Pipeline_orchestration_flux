id: wine-data-processing
namespace: bottleneck

triggers:
  - id: monthly-trigger
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 9 15 * *"  # Exécution chaque 15 du mois à 9h

tasks:
  - id: download_file_erp
    type: io.kestra.plugin.aws.s3.Download
    bucket: "{{ secret('AWS_BUCKET') }}"
    region: "eu-west-3"
    accessKeyId: "{{ secret('AWS_ACCESS_KEY') }}"
    secretKeyId: "{{ secret('AWS_SECRET_KEY') }}"
    key: "{{ secret('AWS_KEY') }}"

  - id: download_file_liaison
    type: io.kestra.plugin.aws.s3.Download
    bucket: "{{ secret('AWS_BUCKET') }}"
    region: "eu-west-3"
    accessKeyId: "{{ secret('AWS_ACCESS_KEY') }}"
    secretKeyId: "{{ secret('AWS_SECRET_KEY') }}"
    key: "{{ secret('AWS_KEY') }}"

  - id: download_file_web
    type: io.kestra.plugin.aws.s3.Download
    bucket: "{{ secret('AWS_BUCKET') }}"
    region: "eu-west-3"
    accessKeyId: "{{ secret('AWS_ACCESS_KEY') }}"
    secretKeyId: "{{ secret('AWS_SECRET_KEY') }}"
    key: "{{ secret('AWS_KEY') }}"

  - id: load_data
    type: io.kestra.plugin.scripts.python.Script
    script: |
      import os

      # Installer pandas, duckdb et openpyxl
      os.system('pip install pandas duckdb openpyxl')

      import pandas as pd
      import duckdb

      # Connexion à une base de données en mémoire
      conn = duckdb.connect(database=':memory:')

      # Récupérer les chemins des fichiers téléchargés depuis Kestra
      erp_path = "{{ outputs.download_file_erp.uri }}"
      liaison_path = "{{ outputs.download_file_liaison.uri }}"
      web_path = "{{ outputs.download_file_web.uri }}"

      # Lire chaque fichier Excel avec pandas
      df_erp = pd.read_excel(erp_path)
      df_liaison = pd.read_excel(liaison_path)
      df_web = pd.read_excel(web_path)

      # Créer une table DuckDB pour chaque fichier
      conn.execute("CREATE TABLE erp AS SELECT * FROM df_erp")
      conn.execute("CREATE TABLE liaison AS SELECT * FROM df_liaison")
      conn.execute("CREATE TABLE web AS SELECT * FROM df_web")

      # Optionnel : Afficher les données pour vérifier
      result_erp = conn.execute("SELECT * FROM erp LIMIT 5;").fetchall()
      result_liaison = conn.execute("SELECT * FROM liaison LIMIT 5;").fetchall()
      result_web = conn.execute("SELECT * FROM web LIMIT 5;").fetchall()

      # Affichage des résultats pour vérification
      print("Table ERP:", result_erp)
      print("Table Liaison:", result_liaison)
      print("Table Web:", result_web)



  - id: clean_data
    type: io.kestra.plugin.scripts.sql.duckdb.Script
    script: |
      DELETE FROM erp WHERE id IS NULL;
      DELETE FROM web WHERE id IS NULL;
      DELETE FROM liaison WHERE id IS NULL;

  - id: deduplicate_data
    type: io.kestra.plugin.scripts.sql.duckdb.Script
    script: |
      CREATE TABLE erp_clean AS SELECT DISTINCT * FROM erp;
      CREATE TABLE web_clean AS SELECT DISTINCT * FROM web;
      CREATE TABLE liaison_clean AS SELECT DISTINCT * FROM liaison;

  - id: join_data
    type: io.kestra.plugin.scripts.sql.duckdb.Script
    script: |
      CREATE TABLE merged_data AS
      SELECT e.*, w.*
      FROM erp_clean e
      JOIN liaison_clean l ON e.id = l.erp_id
      JOIN web_clean w ON l.web_id = w.id;

  - id: calculate_revenue
    type: io.kestra.plugin.scripts.sql.duckdb.Script
    script: |
      CREATE TABLE revenue AS
      SELECT product_id, SUM(price * quantity) AS revenue
      FROM merged_data
      GROUP BY product_id;

      CREATE TABLE total_revenue AS
      SELECT SUM(revenue) AS total FROM revenue;

  - id: identify_premium_wines
    type: io.kestra.plugin.scripts.python.Script
    script: |
      import duckdb
      import pandas as pd

      conn = duckdb.connect(database=':memory:')
      df = conn.execute("SELECT product_id, price FROM merged_data").fetch_df()

      mean_price = df['price'].mean()
      std_price = df['price'].std()
      df['z_score'] = (df['price'] - mean_price) / std_price

      premium_wines = df[df['z_score'] > 2]
      ordinary_wines = df[df['z_score'] <= 2]

      premium_wines.to_csv('premium_wines.csv', index=False)
      ordinary_wines.to_csv('ordinary_wines.csv', index=False)

  - id: export_reports
    type: io.kestra.plugin.scripts.sql.duckdb.Script
    script: |
      COPY (SELECT * FROM revenue) TO 'revenue_report.xlsx' (FORMAT 'xlsx');

  - id: check_premium_wines
    type: io.kestra.core.tasks.flows.Conditional
    conditions:
      - type: io.kestra.core.tasks.flows.ConditionExpression
        expression: "{{ task.identify_premium_wines.outputs.premium_wines | length > 0 }}"
    tasks:
      - id: export_premium_wines
        type: io.kestra.plugin.scripts.sql.duckdb.Script
        script: |
          COPY (SELECT * FROM premium_wines) TO 'premium_wines.csv' (FORMAT 'csv');

  - id: check_ordinary_wines
    type: io.kestra.core.tasks.flows.Conditional
    conditions:
      - type: io.kestra.core.tasks.flows.ConditionExpression
        expression: "{{ task.identify_premium_wines.outputs.ordinary_wines | length > 0 }}"
    tasks:
      - id: export_ordinary_wines
        type: io.kestra.plugin.scripts.sql.duckdb.Script
        script: |
          COPY (SELECT * FROM ordinary_wines) TO 'ordinary_wines.csv' (FORMAT 'csv');
          
          
 - id: send_email_if_files_exist
    type: io.kestra.core.tasks.flows.Conditional
    conditions:
      - type: io.kestra.core.tasks.flows.ConditionExpression
        expression: "{{ task.export_revenue.outputs.file != null or task.export_premium_wines.outputs.file != null or task.export_ordinary_wines.outputs.file != null }}"
    tasks:
      - id: send_reports
        type: io.kestra.plugin.notifications.email.Sendgrid
        from: "{{ secret('EMAIL_FROM') }}"
        to: 
          - "{{ secret('EMAIL_TO_1') }}"
          - "{{ secret('EMAIL_TO_2') }}"
        subject: "Rapports Mensuels - Chiffres et Vins Premium"
        attachments:
          - 'revenue_report.xlsx'
          - 'premium_wines.csv'
          - 'ordinary_wines.csv'
        content: |
          Bonjour,
          
          Veuillez trouver ci-joints les rapports des chiffres d'affaires et la liste des vins premium et ordinaires.
          
          Cordialement,
          L'équipe Data Engineering.
